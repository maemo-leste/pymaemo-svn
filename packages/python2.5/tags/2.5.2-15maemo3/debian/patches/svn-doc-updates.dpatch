#! /bin/sh -e

# DP: SVN updates of the release25-maint branch (until 2008-07-25).

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "usage: `basename $0`: -patch|-unpatch [-d <srcdir>]"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        autoconf
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        rm -f configure
        ;;
    *)
	echo >&2 "usage: `basename $0`: -patch|-unpatch [-d <srcdir>]"
        exit 1
esac
exit 0

# svn diff http://svn.python.org/projects/python/tags/r252 http://svn.python.org/projects/python/branches/release25-maint
# diff -urN --exclude=.svn Python-2.5 svn

Index: Doc/dist/dist.tex
===================================================================
--- Doc/dist/dist.tex	(.../tags/r252)	(Revision 65243)
+++ Doc/dist/dist.tex	(.../branches/release25-maint)	(Revision 65243)
@@ -1213,7 +1213,8 @@
 be included in the source distribution:
 \begin{itemize}
 \item all files in the Distutils ``build'' tree (default \file{build/})
-\item all files in directories named \file{RCS}, \file{CVS} or \file{.svn}
+\item all files in directories named \file{RCS}, \file{CVS}, \file{.svn},
+      \file{.hg}, \file{.git}, \file{.bzr}, or \file{\_darcs}
 \end{itemize}
 Now we have our complete list of files, which is written to the manifest
 for future reference, and then used to build the source distribution
@@ -1246,7 +1247,8 @@
   \code{prune} command in the manifest template comes after the
   \code{recursive-include} command
 \item exclude the entire \file{build} tree, and any \file{RCS},
-  \file{CVS} and \file{.svn} directories
+  \file{CVS}, \file{.svn}, \file{.hg}, \file{.git}, \file{.bzr}, or
+  \file{\_darcs} directories
 \end{enumerate}
 Just like in the setup script, file and directory names in the manifest
 template should always be slash-separated; the Distutils will take care
Index: Doc/lib/emailmessage.tex
===================================================================
--- Doc/lib/emailmessage.tex	(.../tags/r252)	(Revision 65243)
+++ Doc/lib/emailmessage.tex	(.../branches/release25-maint)	(Revision 65243)
@@ -34,7 +34,7 @@
 \end{classdesc}
 
 \begin{methoddesc}[Message]{as_string}{\optional{unixfrom}}
-Return the entire message flatten as a string.  When optional
+Return the entire message flattened as a string.  When optional
 \var{unixfrom} is \code{True}, the envelope header is included in the
 returned string.  \var{unixfrom} defaults to \code{False}.
 
Index: Doc/lib/tzinfo-examples.py
===================================================================
--- Doc/lib/tzinfo-examples.py	(.../tags/r252)	(Revision 65243)
+++ Doc/lib/tzinfo-examples.py	(.../branches/release25-maint)	(Revision 65243)
@@ -87,12 +87,32 @@
         dt += timedelta(days_to_go)
     return dt
 
-# In the US, DST starts at 2am (standard time) on the first Sunday in April.
-DSTSTART = datetime(1, 4, 1, 2)
-# and ends at 2am (DST time; 1am standard time) on the last Sunday of Oct.
-# which is the first Sunday on or after Oct 25.
-DSTEND = datetime(1, 10, 25, 1)
 
+# US DST Rules
+#
+# This is a simplified (i.e., wrong for a few cases) set of rules for US
+# DST start and end times. For a complete and up-to-date set of DST rules
+# and timezone definitions, visit the Olson Database (or try pytz):
+# http://www.twinsun.com/tz/tz-link.htm
+# http://sourceforge.net/projects/pytz/ (might not be up-to-date)
+#
+# In the US, since 2007, DST starts at 2am (standard time) on the second
+# Sunday in March, which is the first Sunday on or after Mar 8.
+DSTSTART_2007 = datetime(1, 3, 8, 2)
+# and ends at 2am (DST time; 1am standard time) on the first Sunday of Nov.
+DSTEND_2007 = datetime(1, 11, 1, 1)
+# From 1987 to 2006, DST used to start at 2am (standard time) on the first
+# Sunday in April and to end at 2am (DST time; 1am standard time) on the last
+# Sunday of October, which is the first Sunday on or after Oct 25.
+DSTSTART_1987_2006 = datetime(1, 4, 1, 2)
+DSTEND_1987_2006 = datetime(1, 10, 25, 1)
+# From 1967 to 1986, DST used to start at 2am (standard time) on the last
+# Sunday in April (the one on or after April 24) and to end at 2am (DST time;
+# 1am standard time) on the last Sunday of October, which is the first Sunday
+# on or after Oct 25.
+DSTSTART_1967_1986 = datetime(1, 4, 24, 2)
+DSTEND_1967_1986 = DSTEND_1987_2006
+
 class USTimeZone(tzinfo):
 
     def __init__(self, hours, reprname, stdname, dstname):
@@ -122,10 +142,20 @@
             return ZERO
         assert dt.tzinfo is self
 
-        # Find first Sunday in April & the last in October.
-        start = first_sunday_on_or_after(DSTSTART.replace(year=dt.year))
-        end = first_sunday_on_or_after(DSTEND.replace(year=dt.year))
+        # Find start and end times for US DST. For years before 1967, return
+        # ZERO for no DST.
+        if 2006 < dt.year:
+            dststart, dstend = DSTSTART_2007, DSTEND_2007
+        elif 1986 < dt.year < 2007:
+            dststart, dstend = DSTSTART_1987_2006, DSTEND_1987_2006
+        elif 1966 < dt.year < 1987:
+            dststart, dstend = DSTSTART_1967_1986, DSTEND_1967_1986
+        else:
+            return ZERO
 
+        start = first_sunday_on_or_after(dststart.replace(year=dt.year))
+        end = first_sunday_on_or_after(dstend.replace(year=dt.year))
+
         # Can't compare naive to aware objects, so strip the timezone from
         # dt first.
         if start <= dt.replace(tzinfo=None) < end:
Index: Doc/lib/libitertools.tex
===================================================================
--- Doc/lib/libitertools.tex	(.../tags/r252)	(Revision 65243)
+++ Doc/lib/libitertools.tex	(.../branches/release25-maint)	(Revision 65243)
@@ -68,6 +68,7 @@
 
   \begin{verbatim}
      def chain(*iterables):
+         # chain('ABC', 'DEF') --> A B C D E F
          for it in iterables:
              for element in it:
                  yield element
@@ -83,6 +84,7 @@
 
   \begin{verbatim}
      def count(n=0):
+         # count(10) --> 10 11 12 13 14 ...
          while True:
              yield n
              n += 1
@@ -100,6 +102,7 @@
 
   \begin{verbatim}
      def cycle(iterable):
+         # cycle('ABCD') --> A B C D A B C D A B C D ...
          saved = []
          for element in iterable:
              yield element
@@ -121,6 +124,7 @@
 
   \begin{verbatim}
      def dropwhile(predicate, iterable):
+         # dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1
          iterable = iter(iterable)
          for x in iterable:
              if not predicate(x):
@@ -156,6 +160,8 @@
 
   \begin{verbatim}
     class groupby(object):
+        # [k for k, g in groupby('AAAABBBCCDAABBB')] --> A B C D A B
+        # [(list(g)) for k, g in groupby('AAAABBBCCD')] --> AAAA BBB CC D
         def __init__(self, iterable, key=None):
             if key is None:
                 key = lambda x: x
@@ -187,6 +193,7 @@
 
   \begin{verbatim}
      def ifilter(predicate, iterable):
+         # ifilter(lambda x: x%2, range(10)) --> 1 3 5 7 9
          if predicate is None:
              predicate = bool
          for x in iterable:
@@ -203,6 +210,7 @@
 
   \begin{verbatim}
      def ifilterfalse(predicate, iterable):
+         # ifilterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8
          if predicate is None:
              predicate = bool
          for x in iterable:
@@ -225,6 +233,7 @@
 
   \begin{verbatim}
      def imap(function, *iterables):
+         # imap(pow, (2,3,10), (5,2,3)) --> 32 9 1000
          iterables = map(iter, iterables)
          while True:
              args = [i.next() for i in iterables]
@@ -251,6 +260,10 @@
 
   \begin{verbatim}
      def islice(iterable, *args):
+         # islice('ABCDEFG', 2) --> A B
+         # islice('ABCDEFG', 2, 4) --> C D
+         # islice('ABCDEFG', 2, None) --> C D E F G
+         # islice('ABCDEFG', 0, None, 2) --> A C E G
          s = slice(*args)
          it = iter(xrange(s.start or 0, s.stop or sys.maxint, s.step or 1))
          nexti = it.next()
@@ -274,6 +287,7 @@
 
   \begin{verbatim}
      def izip(*iterables):
+         # izip('ABCD', 'xy') --> Ax By
          iterables = map(iter, iterables)
          while iterables:
              result = [it.next() for it in iterables]
@@ -311,6 +325,7 @@
 
   \begin{verbatim}
      def repeat(object, times=None):
+         # repeat(10, 3) --> 10 10 10
          if times is None:
              while True:
                  yield object
@@ -331,6 +346,7 @@
 
   \begin{verbatim}
      def starmap(function, iterable):
+         # starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000
          iterable = iter(iterable)
          while True:
              yield function(*iterable.next())
@@ -343,6 +359,7 @@
 
   \begin{verbatim}
      def takewhile(predicate, iterable):
+         # takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4
          for x in iterable:
              if predicate(x):
                  yield x
@@ -389,34 +406,6 @@
 
 \begin{verbatim}
 
->>> amounts = [120.15, 764.05, 823.14]
->>> for checknum, amount in izip(count(1200), amounts):
-...     print 'Check %d is for $%.2f' % (checknum, amount)
-...
-Check 1200 is for $120.15
-Check 1201 is for $764.05
-Check 1202 is for $823.14
-
->>> import operator
->>> for cube in imap(operator.pow, xrange(1,5), repeat(3)):
-...    print cube
-...
-1
-8
-27
-64
-
->>> reportlines = ['EuroPython', 'Roster', '', 'alex', '', 'laura',
-                  '', 'martin', '', 'walter', '', 'mark']
->>> for name in islice(reportlines, 3, None, 2):
-...    print name.title()
-...
-Alex
-Laura
-Martin
-Walter
-Mark
-
 # Show a dictionary sorted and grouped by value
 >>> from operator import itemgetter
 >>> d = dict(a=1, b=2, c=1, d=2, e=1, f=2, g=3)
@@ -529,10 +518,8 @@
 def pairwise(iterable):
     "s -> (s0,s1), (s1,s2), (s2, s3), ..."
     a, b = tee(iterable)
-    try:
-        b.next()
-    except StopIteration:
-        pass
+    for elem in b:
+        break
     return izip(a, b)
 
 def grouper(n, iterable, padvalue=None):
@@ -543,4 +530,24 @@
     "Return a new dict with swapped keys and values"
     return dict(izip(d.itervalues(), d))
 
+def roundrobin(*iterables):
+    "roundrobin('abc', 'd', 'ef') --> 'a', 'd', 'e', 'b', 'f', 'c'"
+    # Recipe credited to George Sakkis
+    pending = len(iterables)
+    nexts = cycle(iter(it).next for it in iterables)
+    while pending:
+        try:
+            for next in nexts:
+                yield next()
+        except StopIteration:
+            pending -= 1
+            nexts = cycle(islice(nexts, pending))
+
+def powerset(iterable):
+    "powerset('ab') --> set([]), set(['a']), set(['b']), set(['a', 'b'])"
+    # Recipe credited to Eric Raymond
+    pairs = [(2**i, x) for i, x in enumerate(iterable)]
+    for n in xrange(2**len(pairs)):
+        yield set(x for m, x in pairs if m&n)
+
 \end{verbatim}
Index: Doc/lib/libuserdict.tex
===================================================================
--- Doc/lib/libuserdict.tex	(.../tags/r252)	(Revision 65243)
+++ Doc/lib/libuserdict.tex	(.../branches/release25-maint)	(Revision 65243)
@@ -10,7 +10,7 @@
 greatly simplifies writing classes that need to be substitutable for
 dictionaries (such as the shelve module).
 
-This also module defines a class, \class{UserDict}, that acts as a wrapper
+This module also defines a class, \class{UserDict}, that acts as a wrapper
 around dictionary objects.  The need for this class has been largely
 supplanted by the ability to subclass directly from \class{dict} (a feature
 that became available starting with Python version 2.2).  Prior to the
Index: Doc/inst/inst.tex
===================================================================
--- Doc/inst/inst.tex	(.../tags/r252)	(Revision 65243)
+++ Doc/inst/inst.tex	(.../branches/release25-maint)	(Revision 65243)
@@ -703,7 +703,7 @@
 Paths can be absolute or relative, in which case they're relative to
 the directory containing the \file{.pth} file.  Any directories added
 to the search path will be scanned in turn for \file{.pth} files.  See
-\citetitle[http://www.python.org/doc/devel/lib/module-site.html]
+\citetitle[http://docs.python.org/lib/module-site.html]
 {site module documentation} for more information.
 
 A slightly less convenient way is to edit the \file{site.py} file in
