Index: evolution-python-0.0.1/src/evolution.override
===================================================================
--- evolution-python-0.0.1.orig/src/evolution.override	2007-07-02 14:18:09.000000000 -0300
+++ evolution-python-0.0.1/src/evolution.override	2007-07-02 14:20:43.000000000 -0300
@@ -45,6 +45,394 @@
 	return result;
 }
 
+/* EBookQuery */
+
+typedef struct {
+	PyObject_HEAD
+	EBookQuery *query;
+} PyEBookQuery;
+
+/* Forward function declarations */
+static PyObject *pyebook_query_new(EBookQuery *query);
+static void pyebook_query_dealloc(PyEBookQuery *self);
+static PyObject *pyebook_query_str(PyEBookQuery *self);
+
+static PyObject *pyebook_query_from_string(PyEBookQuery *self,
+                                           PyObject *args,
+                                           PyObject *kwargs);
+static PyObject *pyebook_query_field_exists(PyEBookQuery *self,
+                                            PyObject *args,
+                                            PyObject *kwargs);
+static PyObject *pyebook_query_vcard_field_exists(PyEBookQuery *self,
+                                                  PyObject *args,
+                                                  PyObject *kwargs);
+static PyObject *pyebook_query_field_test(PyEBookQuery *self,
+                                          PyObject *args,
+                                          PyObject *kwargs);
+static PyObject *pyebook_query_any_field_contains(PyEBookQuery *self,
+                                                  PyObject *args,
+                                                  PyObject *kwargs);
+static PyObject *pyebook_query_and(PyEBookQuery *self,
+                                   PyObject *args,
+                                   PyObject *kwargs);
+static PyObject *pyebook_query_or(PyEBookQuery *self,
+                                   PyObject *args,
+                                   PyObject *kwargs);
+static PyObject *pyebook_query_not(PyEBookQuery *self,
+                                   PyObject *args);
+static PyObject *pyebook_query_copy(PyEBookQuery *self,
+                                    PyObject *args);
+
+static PyMethodDef PyEBookQuery_methods[] = {
+    {"from_string", (PyCFunctionWithKeywords)pyebook_query_from_string,
+        METH_KEYWORDS | METH_VARARGS | METH_CLASS,
+        "Creates a new query from a string."},
+    {"field_exists", (PyCFunctionWithKeywords)pyebook_query_field_exists,
+        METH_KEYWORDS | METH_VARARGS | METH_CLASS,
+        "Replaces this query with a new query to check if the given \
+        field exists"},
+    {"vcard_field_exists",
+        (PyCFunctionWithKeywords)pyebook_query_vcard_field_exists,
+        METH_KEYWORDS | METH_VARARGS | METH_CLASS,
+        "Replaces this query with a new query to check if the given \
+        vcard field exists"},
+    {"field_test", (PyCFunctionWithKeywords)pyebook_query_field_test,
+        METH_KEYWORDS | METH_VARARGS | METH_CLASS,
+        "Replaces this query with a new query with a given test."},
+    {"any_field_contains",
+        (PyCFunctionWithKeywords)pyebook_query_any_field_contains,
+        METH_KEYWORDS | METH_VARARGS | METH_CLASS,
+        "Replaces this query with a new 'generic' query."},
+    {"_and",
+        (PyCFunctionWithKeywords)pyebook_query_and,
+        METH_KEYWORDS | METH_VARARGS,
+        "Creates a new query with a 'and' operation with the given \
+        query list and this query."},
+     {"_or",
+        (PyCFunctionWithKeywords)pyebook_query_or,
+        METH_KEYWORDS | METH_VARARGS,
+        "Creates a new querywith a 'or' operation with the given \
+        query list and this query."},
+     {"_not",
+     (PyCFunction)pyebook_query_not,
+        METH_NOARGS,
+        "Creates a new query with a 'not' operation with this query."},
+     {"copy",
+     (PyCFunction)pyebook_query_copy,
+        METH_NOARGS,
+        "Copies this query."},
+   {NULL}
+};
+
+PyTypeObject PyEBookQuery_Type = {
+	PyObject_HEAD_INIT(NULL)
+	0,                  /* ob_size */
+	"evolution.EBookQuery",          /* tp_name */
+	sizeof(PyEBookQuery),       /* tp_basicsize */
+	0,                  /* tp_itemsize */
+	/* methods */
+	(destructor)pyebook_query_dealloc,   /* tp_dealloc */
+	(printfunc)0,           /* tp_print */
+	(getattrfunc)0,   /* tp_getattr */
+	(setattrfunc)0,         /* tp_setattr */
+	(cmpfunc)0,  /* tp_compare */
+	(reprfunc)0,            /* tp_repr */
+	0,                  /* tp_as_number */
+	0,                  /* tp_as_sequence */
+	0,                  /* tp_as_mapping */
+	(hashfunc)0,    /* tp_hash */
+	(ternaryfunc)0,         /* tp_call */
+	pyebook_query_str,            /* tp_str */
+	(getattrofunc)0,            /* tp_getattro */
+	(setattrofunc)0,            /* tp_setattro */
+	0,                  /* tp_as_buffer */
+	Py_TPFLAGS_DEFAULT,         /* tp_flags */
+	NULL, /* Documentation string */
+	(traverseproc)0,            /* tp_traverse */
+	(inquiry)0,             /* tp_clear */
+	(richcmpfunc)0,         /* tp_richcompare */
+	0,                  /* tp_weaklistoffset */
+	(getiterfunc)0,         /* tp_iter */
+	(iternextfunc)0,            /* tp_iternext */
+	PyEBookQuery_methods,       /* tp_methods */
+	0,                  /* tp_members */
+	0,       /* tp_getset */
+	(PyTypeObject *)0,          /* tp_base */
+	(PyObject *)0,          /* tp_dict */
+	0,                  /* tp_descr_get */
+	0,                  /* tp_descr_set */
+	0,                  /* tp_dictoffset */
+	(initproc)0,            /* tp_init */
+	(allocfunc)0,           /* tp_alloc */
+	(newfunc)0,             /* tp_new */
+	0,                  /* tp_free */
+	(inquiry)0,             /* tp_is_gc */
+	(PyObject *)0,          /* tp_bases */
+};
+
+static PyObject *
+pyebook_query_new(EBookQuery *query)
+{
+	PyEBookQuery *self;
+
+	self = (PyEBookQuery *)PyObject_NEW(PyEBookQuery, &PyEBookQuery_Type);
+
+	if (self == NULL)
+		return NULL;
+
+	self->query = query;
+
+	return (PyObject *)self;
+}
+
+static void
+pyebook_query_dealloc(PyEBookQuery *self)
+{
+	if (self == NULL)
+		return;
+
+    if (self->query != NULL)
+    	e_book_query_unref(self->query);
+    PyObject_DEL(self);
+}
+
+static PyObject *
+pyebook_query_str(PyEBookQuery *self){
+
+    char *repr = NULL;
+    PyObject *ret;
+
+    if (self->query != NULL)
+        repr = e_book_query_to_string(self->query);
+
+    ret = PyString_FromString( repr != NULL ? repr : "<Uninitialized>");
+
+    if (repr != NULL)
+        free(repr);
+
+    return ret;
+}
+
+static PyObject *
+pyebook_query_from_string(PyEBookQuery *self,
+                          PyObject *args,
+                          PyObject *kwargs)
+{
+    static char *kwlist[] = { "query", NULL };
+    char *query;
+    EBookQuery *new_query;
+
+    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "s", kwlist, &query))
+        return NULL;
+
+    new_query = e_book_query_from_string(query);
+
+    return pyebook_query_new(new_query);
+}
+
+static PyObject *
+pyebook_query_field_exists(PyEBookQuery *self,
+                           PyObject *args,
+                           PyObject *kwargs)
+{
+    static char *kwlist[] = { "field", NULL };
+    PyObject *py_type;
+    EContactField field;
+    EBookQuery *new_query;
+
+    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O", kwlist, &py_type))
+        return NULL;
+
+    if(pyg_enum_get_value(E_TYPE_CONTACT_FIELD, py_type, (gint *)&field))
+        return NULL;
+
+    new_query = e_book_query_field_exists(field);
+
+    return pyebook_query_new(new_query);
+}
+
+static PyObject *
+pyebook_query_vcard_field_exists(PyEBookQuery *self,
+                                 PyObject *args,
+                                 PyObject *kwargs)
+{
+    static char *kwlist[] = { "field", NULL };
+    char *field;
+    EBookQuery *new_query;
+
+    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "s", kwlist, &field))
+        return NULL;
+
+    new_query = e_book_query_vcard_field_exists(field);
+
+    return pyebook_query_new(new_query);
+}
+
+static PyObject *
+pyebook_query_field_test(PyEBookQuery *self,
+                         PyObject *args,
+                         PyObject *kwargs)
+{
+    static char *kwlist[] = { "field", "test", "value", NULL };
+    PyObject *py_field;
+    PyObject *py_test;
+    EContactField field;
+    EBookQueryTest test;
+    char *value;
+    EBookQuery *new_query;
+
+    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOs", kwlist,
+                                     &py_field, &py_test, &value))
+        return NULL;
+
+    if(pyg_enum_get_value(E_TYPE_CONTACT_FIELD, py_field, (gint *)&field))
+        return NULL;
+
+    if(pyg_enum_get_value(E_TYPE_BOOK_QUERY_TEST, py_test, (gint *)&test))
+        return NULL;
+
+    new_query = e_book_query_field_test(field, test, value);
+
+    return pyebook_query_new(new_query);
+}
+
+static PyObject *
+pyebook_query_any_field_contains(PyEBookQuery *self,
+                                 PyObject *args,
+                                 PyObject *kwargs)
+{
+    static char *kwlist[] = { "field", NULL };
+    char *field;
+    EBookQuery *new_query;
+
+    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "s", kwlist, &field))
+        return NULL;
+
+    new_query = e_book_query_any_field_contains(field);
+
+    return pyebook_query_new(new_query);
+}
+
+static PyObject *
+pyebook_query_and(PyEBookQuery *self,
+                  PyObject *args,
+                  PyObject *kwargs)
+{
+    static char *kwlist[] = { "queries", NULL };
+    PyObject *list;
+    int size;
+    int i;
+    int has_self = 0;
+    EBookQuery **queries = NULL;
+    EBookQuery *new_query = NULL;
+
+    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!", kwlist,
+                                     &PyList_Type, &list))
+        return NULL;
+
+    size = PyList_Size(list);
+
+    if (size == 0){
+        Py_INCREF(Py_None);
+        return Py_None;
+    }
+
+    if (self->query != NULL) {
+        queries = (EBookQuery **)malloc(sizeof(EBookQuery *)*(size+1));
+        queries[0] = self->query;
+        has_self = 1;
+    } else {
+        queries = (EBookQuery **)malloc(sizeof(EBookQuery *)*(size));
+    }
+
+    for (i = 0; i < size; i++){
+        PyEBookQuery *query;
+
+        /* FIXME Check for EBookQuery type */
+        query = (PyEBookQuery *) PyList_GetItem(list, i);
+
+        queries[i+has_self] = query->query;
+    }
+
+    new_query = e_book_query_and(size+has_self, queries, FALSE);
+
+    return pyebook_query_new(new_query);
+}
+
+static PyObject *
+pyebook_query_or(PyEBookQuery *self,
+                 PyObject *args,
+                 PyObject *kwargs)
+{
+    static char *kwlist[] = { "queries", NULL };
+    PyObject *list;
+    int size;
+    int i;
+    int has_self = 0;
+    EBookQuery **queries = NULL;
+    EBookQuery *new_query = NULL;
+
+    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!", kwlist,
+                                     &PyList_Type, &list))
+        return NULL;
+
+    size = PyList_Size(list);
+
+    if (size == 0){
+        Py_INCREF(Py_None);
+        return Py_None;
+    }
+
+    if (self->query != NULL) {
+        queries = (EBookQuery **)malloc(sizeof(EBookQuery *)*(size+1));
+        queries[0] = self->query;
+        has_self = 1;
+    } else {
+        queries = (EBookQuery **)malloc(sizeof(EBookQuery *)*(size));
+    }
+
+    for (i = 0; i < size; i++){
+        PyEBookQuery *query;
+
+        /* FIXME Check for EBookQuery type */
+        query = (PyEBookQuery *) PyList_GetItem(list, i);
+
+        queries[i+has_self] = query->query;
+    }
+
+    new_query = e_book_query_or(size+has_self, queries, FALSE);
+
+    return pyebook_query_new(new_query);
+}
+
+static PyObject *
+pyebook_query_not(PyEBookQuery *self,
+                  PyObject *args)
+{
+    EBookQuery *new_query = NULL;
+
+    if (self->query != NULL)
+        new_query = e_book_query_not(self->query, FALSE);
+
+    return pyebook_query_new(new_query);
+}
+
+
+static PyObject *
+pyebook_query_copy(PyEBookQuery *self,
+                   PyObject *args)
+{
+	return pyebook_query_new(e_book_query_copy(self->query));
+}
+
+
+%%
+init
+	PyEBookQuery_Type.tp_alloc = PyType_GenericAlloc;
+	PyEBookQuery_Type.tp_new = PyType_GenericNew;
+	if (PyType_Ready(&PyEBookQuery_Type) < 0)
+		return;
+
 %%
 modulename evolution
 %%
Index: evolution-python-0.0.1/src/evolutionmodule.c
===================================================================
--- evolution-python-0.0.1.orig/src/evolutionmodule.c	2007-07-02 14:18:09.000000000 -0300
+++ evolution-python-0.0.1/src/evolutionmodule.c	2007-07-02 14:18:11.000000000 -0300
@@ -9,6 +9,7 @@
 void pyevolution_add_constants(PyObject *m, const gchar *strip_prefix);
 
 extern PyMethodDef pyevolution_functions[];
+extern PyObject PyEBookQuery_Type;
 
 DL_EXPORT(void)
 initevolution(void)
@@ -33,6 +34,8 @@
                                      EVOLUTION_MINOR_VERSION,
                                      EVOLUTION_PATCH_VERSION));
     
+    PyModule_AddObject(m, "EBookQuery", (PyObject *)&PyEBookQuery_Type);
+
     if (PyErr_Occurred())
         Py_FatalError("could not initialise module _evolution");
 }
Index: evolution-python-0.0.1/test/bookquery.py
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ evolution-python-0.0.1/test/bookquery.py	2007-07-02 14:18:11.000000000 -0300
@@ -0,0 +1,101 @@
+import evolution as e
+import unittest
+
+class TestBookQuery(unittest.TestCase):
+    
+    def setUp(self):
+        pass
+
+    def testUninitialized(self):
+        q1 = e.EBookQuery()
+        self.assertEqual(q1.__str__(), "<Uninitialized>")
+
+    def testFieldExists(self):
+        q1 = e.EBookQuery.field_exists(e.CONTACT_PHOTO)
+        self.assertEqual(q1.__str__(), "(exists \"photo\")")
+
+    def testFieldExists_Raise(self):
+        self.assertRaises(TypeError, e.EBookQuery.field_exists)
+        self.assertRaises(TypeError, e.EBookQuery.field_exists, "foobar")
+
+    def testVCardFieldExists(self):
+        q1 = e.EBookQuery.vcard_field_exists("FN")
+        self.assertEqual(q1.__str__(), "(exists_vcard \"FN\")")
+
+    def testVCardFieldExists_Raise(self):
+        self.assertRaises(TypeError, e.EBookQuery.vcard_field_exists)
+        self.assertRaises(TypeError, e.EBookQuery.vcard_field_exists, 3)
+
+    def testFieldTest_BeginsWith(self):
+        q1 = e.EBookQuery.field_test(e.CONTACT_NAME,
+                                    e.BOOK_QUERY_BEGINS_WITH,
+                                    "dummy")
+        self.assertEqual(q1.__str__(),
+                         "(beginswith \"name\"  \"dummy\")")
+        
+    def testFieldTest_Contains(self):
+        q1 = e.EBookQuery.field_test(e.CONTACT_NAME, e.BOOK_QUERY_CONTAINS,
+                                    "dummy")
+        self.assertEqual(q1.__str__(),
+                         "(contains \"name\"  \"dummy\")")
+
+    def testFieldTest_EndsWith(self):
+        q1 = e.EBookQuery.field_test(e.CONTACT_NAME,
+                                     e.BOOK_QUERY_ENDS_WITH,
+                                     "dummy")
+        self.assertEqual(q1.__str__(),
+                         "(endswith \"name\"  \"dummy\")")
+    def testFieldTest_Is(self):
+        q1 = e.EBookQuery.field_test(e.CONTACT_NAME, e.BOOK_QUERY_IS,
+                           "dummy")
+        self.assertEqual(q1.__str__(),
+                         "(is \"name\"  \"dummy\")")
+
+    def testAnyFieldContains(self):
+        q1 = e.EBookQuery.any_field_contains("dummy")
+        self.assertEqual(q1.__str__(),
+                         "(contains \"x-evolution-any-field\" \"dummy\")")
+
+    def testAnd(self):
+        q1 = e.EBookQuery.field_exists(e.CONTACT_PHOTO)
+        q2 = e.EBookQuery.field_exists(e.CONTACT_NAME)
+        q3 = e.EBookQuery.any_field_contains("dummy")
+
+        q4 = q1._and([q2, q3])
+
+        self.assertEqual(q4.__str__(),
+        """(and (exists \"photo\") (exists \"name\") \
+(contains \"x-evolution-any-field\" \"dummy\") )""")
+
+        q5 = e.EBookQuery()
+        q6 = q5._and(queries=[q1,q2])
+
+        self.assertEqual(q6.__str__(),
+                    "(and (exists \"photo\") (exists \"name\") )")
+
+    def testOr(self):
+        q1 = e.EBookQuery.field_exists(e.CONTACT_PHOTO)
+        q2 = e.EBookQuery.field_exists(e.CONTACT_NAME)
+        q3 = e.EBookQuery.any_field_contains("dummy")
+
+        q4 = q1._or([q2, q3])
+
+        self.assertEqual(q4.__str__(),
+        """(or (exists \"photo\") (exists \"name\") \
+(contains \"x-evolution-any-field\" \"dummy\") )""")
+
+        q5 = e.EBookQuery()
+        q6 = q5._or([q1,q2])
+
+        self.assertEqual(q6.__str__(),
+                    "(or (exists \"photo\") (exists \"name\") )")
+
+    def testNot(self):
+        q1 = e.EBookQuery.field_exists(e.CONTACT_EMAIL)
+        q2 = q1._not()
+
+    def testFromString(self):
+        q1 = e.EBookQuery.from_string("(exists \"name\")")
+        self.assertEqual(q1.__str__(), "(exists \"name\")")
+if __name__ == "__main__":
+    unittest.main()
