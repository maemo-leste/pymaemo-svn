Index: python-2.5.2/Lib/webbrowser.py
===================================================================
--- python-2.5.2.orig/Lib/webbrowser.py	2008-02-23 13:10:13.000000000 -0300
+++ python-2.5.2/Lib/webbrowser.py	2008-02-23 13:10:40.000000000 -0300
@@ -55,10 +55,10 @@
 # It is recommended one does "import webbrowser" and uses webbrowser.open(url)
 # instead of "from webbrowser import *".
 
-def open(url, new=0, autoraise=1):
+def open(url, new=0, autoraise=1, context=None):
     for name in _tryorder:
         browser = get(name)
-        if browser.open(url, new, autoraise):
+        if browser.open(url, new, autoraise, context):
             return True
     return False
 
@@ -144,7 +144,7 @@
         self.name = name
         self.basename = name
 
-    def open(self, url, new=0, autoraise=1):
+    def open(self, url, new=0, autoraise=1, context=None):
         raise NotImplementedError
 
     def open_new(self, url):
@@ -168,7 +168,7 @@
             self.args = name[1:]
         self.basename = os.path.basename(self.name)
 
-    def open(self, url, new=0, autoraise=1):
+    def open(self, url, new=0, autoraise=1, context=None):
         cmdline = [self.name] + [arg.replace("%s", url)
                                  for arg in self.args]
         try:
@@ -185,7 +185,7 @@
     """Class for all browsers which are to be started in the
        background."""
 
-    def open(self, url, new=0, autoraise=1):
+    def open(self, url, new=0, autoraise=1, context=None):
         cmdline = [self.name] + [arg.replace("%s", url)
                                  for arg in self.args]
         try:
@@ -256,7 +256,7 @@
         else:
             return not p.wait()
 
-    def open(self, url, new=0, autoraise=1):
+    def open(self, url, new=0, autoraise=1, context=None):
         if new == 0:
             action = self.remote_action
         elif new == 1:
@@ -340,7 +340,7 @@
     for more information on the Konqueror remote-control interface.
     """
 
-    def open(self, url, new=0, autoraise=1):
+    def open(self, url, new=0, autoraise=1, context=None):
         # XXX Currently I know no way to prevent KFM from opening a new win.
         if new == 2:
             action = "newTab"
@@ -389,6 +389,29 @@
         else:
             return (p.poll() is None)
 
+class MaemoBrowser(BaseBrowser):
+    """Controller for the Maemo Browser.
+    """
+
+    def open(self, url, new=0, autoraise=1, context=None):
+        try:
+            import dbus
+            bus = dbus.SessionBus()
+            obj = bus.get_object("com.nokia.osso_browser",
+                                "/com/nokia/osso_browser")
+
+            if new:
+                obj.open_new_window(url, dbus_interface="com.nokia.osso_browser")
+            else:
+                obj.load_url(url, dbus_interface="com.nokia.osso_browser")
+
+        except ImportError:
+            print "webbrowser.open requires DBus support"
+            raise
+        except Exception: # In scratchbox, can raise urllib2.URLError
+            return False
+
+        return True
 
 class Grail(BaseBrowser):
     # There should be a way to maintain a connection to Grail, but the
@@ -428,7 +451,7 @@
         s.close()
         return 1
 
-    def open(self, url, new=0, autoraise=1):
+    def open(self, url, new=0, autoraise=1, context=None):
         if new:
             ok = self._remote("LOADNEW " + url)
         else:
@@ -444,6 +467,8 @@
 # a console terminal or an X display to run.
 
 def register_X_browsers():
+    register("maemobrowser", MaemoBrowser, MaemoBrowser())
+
     # The default Gnome browser
     if _iscommand("gconftool-2"):
         # get the web browser string from gconftool
@@ -490,6 +515,7 @@
     if _iscommand("grail"):
         register("grail", Grail, None)
 
+
 # Prefer X browsers if present
 if os.environ.get("DISPLAY"):
     register_X_browsers()
