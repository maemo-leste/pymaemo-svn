From the fix to the initial SETWAKEUPFD support in GNOME #481569.

Index: pygobject-2.14.2/gobject/pygmainloop.c
===================================================================
--- pygobject-2.14.2.orig/gobject/pygmainloop.c	2008-06-07 14:06:05.826506163 +0200
+++ pygobject-2.14.2/gobject/pygmainloop.c	2008-06-07 15:06:05.219010028 +0200
@@ -24,6 +24,7 @@
 #ifdef HAVE_CONFIG_H
 #  include <config.h>
 #endif
+#include <fcntl.h>
 
 #include "pygobject-private.h"
 #include "pythread.h"
@@ -112,7 +113,10 @@ static gboolean
 pyg_signal_watch_prepare(GSource *source,
 			 int     *timeout)
 {
+#ifdef HAVE_PYSIGNAL_SETWAKEUPFD
     PySignalWatchSource *real_source = (PySignalWatchSource *)source;
+    int flag;
+#endif
 
     /* Python only invokes signal handlers from the main thread,
      * so if a thread other than the main thread receives the signal
@@ -146,6 +150,11 @@ pyg_signal_watch_prepare(GSource *source
     real_source->fd.events = G_IO_IN | G_IO_HUP | G_IO_ERR;
     g_source_add_poll(source, &real_source->fd);
 
+    /* Make the read end of the fd non blocking */
+    flag = fcntl(real_source->fds[0], F_GETFL, 0);
+    flag |= O_NONBLOCK;
+    fcntl(real_source->fds[0], F_SETFL, flag);
+
     PySignal_SetWakeupFd(real_source->fds[1]);
 
 #else /* !HAVE_PYSIGNAL_SETWAKEUPFD */
@@ -166,10 +175,20 @@ pyg_signal_watch_check(GSource *source)
     PyGILState_STATE state;
     GMainLoop *main_loop;
 
+#ifdef HAVE_PYSIGNAL_SETWAKEUPFD
+    PySignalWatchSource *real_source = (PySignalWatchSource *)source;
+    char buf[1];
+#endif
+
     state = pyg_gil_state_ensure();
 
     main_loop = pyg_get_current_main_loop();
 
+#ifdef HAVE_PYSIGNAL_SETWAKEUPFD
+    if (real_source->fds[0])
+        read(real_source->fds[0], &buf, 1);
+#endif
+
     if (PyErr_CheckSignals() == -1 && main_loop != NULL) {
 	PyErr_SetNone(PyExc_KeyboardInterrupt);
 	g_main_loop_quit(main_loop);
