Index: gnome-python-2.18.0/examples/gconf/basic-gconf-app.py
===================================================================
--- gnome-python-2.18.0.orig/examples/gconf/basic-gconf-app.py	2008-04-01 09:59:15.000000000 -0300
+++ gnome-python-2.18.0/examples/gconf/basic-gconf-app.py	2008-04-01 10:04:20.000000000 -0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2.5
 #
 # This program demonstrates how to use GConf.  The key thing is that
 # the main window and the prefs dialog have NO KNOWLEDGE of one
@@ -40,9 +40,9 @@
 # Special mention of an idiom often used in GTK+ apps that does
 # not work right with GConf but may appear to at first:
 #
-# i_am_changing_value = gtk.TRUE
+# i_am_changing_value = True
 # change_value (value)
-# i_am_changing_value = gtk.FALSE
+# i_am_changing_value = False
 # 
 # This breaks for several reasons: notification of changes
 # may be asynchronous, you may get notifications that are not
@@ -56,7 +56,7 @@
 # whatever loop you were trying to avoid.
 #
 
-import gconf
+from gnome import gconf
 import gtk
 
 def main ():
@@ -90,7 +90,7 @@
 
 # Quit app when window is destroyed 
 def destroy_callback (widget, *data):
-    gtk.mainquit ()
+    gtk.main_quit ()
 
     
 # Remove the notification callback when the widget monitoring
@@ -174,28 +174,28 @@
     w = gtk.Window ()
     w.set_title ('basic-gconf-app Main Window')
   
-    vbox = gtk.VBox (gtk.FALSE, 5)
+    vbox = gtk.VBox (False, 5)
     vbox.set_border_width (5)
     w.add (vbox)
   
     # Create labels that we can "configure"
     config = create_configurable_widget (client, "/apps/basic-gconf-app/foo")
-    vbox.pack_start (config, gtk.TRUE, gtk.TRUE)
+    vbox.pack_start (config, True, True)
 
     config = create_configurable_widget (client, "/apps/basic-gconf-app/bar")
-    vbox.pack_start (config, gtk.TRUE, gtk.TRUE)
+    vbox.pack_start (config, True, True)
   
     config = create_configurable_widget (client, "/apps/basic-gconf-app/baz")
-    vbox.pack_start (config, gtk.TRUE, gtk.TRUE)
+    vbox.pack_start (config, True, True)
 
     config = create_configurable_widget (client, "/apps/basic-gconf-app/blah");
-    vbox.pack_start (config, gtk.TRUE, gtk.TRUE)
+    vbox.pack_start (config, True, True)
 
     w.connect ('destroy', destroy_callback)
     w.set_data ('client', client)
   
     prefs = gtk.Button ("Prefs");
-    vbox.pack_end ( prefs, gtk.FALSE, gtk.FALSE)
+    vbox.pack_end ( prefs, False, False)
     prefs.connect ('clicked', prefs_clicked, w)
     
     return w
@@ -231,13 +231,13 @@
 	client.unset (key)
 	
 # Create an entry used to edit the given config key 
-def create_config_entry (prefs_dialog, client, config_key, focus=gtk.FALSE):
-    hbox = gtk.HBox (gtk.FALSE, 5)
+def create_config_entry (prefs_dialog, client, config_key, focus=False):
+    hbox = gtk.HBox (False, 5)
     label = gtk.Label (config_key)
     entry = gtk.Entry ()
 
-    hbox.pack_start (label, gtk.FALSE, gtk.FALSE, 0)
-    hbox.pack_end (entry, gtk.FALSE, gtk.FALSE, 0)
+    hbox.pack_start (label, False, False, 0)
+    hbox.pack_end (entry, False, False, 0)
 
     # this will print an error via default error handler
     # if the key isn't set to a string
@@ -279,24 +279,24 @@
     dialog.set_default_response (gtk.RESPONSE_ACCEPT)
 
     # resizing doesn't grow the entries anyhow
-    dialog.set_resizable (gtk.FALSE)
+    dialog.set_resizable (False)
   
-    vbox = gtk.VBox (gtk.FALSE, 5)
+    vbox = gtk.VBox (False, 5)
     vbox.set_border_width (5)
   
     dialog.vbox.pack_start (vbox)
 
-    entry = create_config_entry (dialog, client, "/apps/basic-gconf-app/foo", gtk.TRUE)
-    vbox.pack_start (entry, gtk.FALSE, gtk.FALSE)
+    entry = create_config_entry (dialog, client, "/apps/basic-gconf-app/foo", True)
+    vbox.pack_start (entry, False, False)
 
     entry = create_config_entry (dialog, client, "/apps/basic-gconf-app/bar")
-    vbox.pack_start (entry, gtk.FALSE, gtk.FALSE)
+    vbox.pack_start (entry, False, False)
   
     entry = create_config_entry (dialog, client, "/apps/basic-gconf-app/baz")
-    vbox.pack_start (entry, gtk.FALSE, gtk.FALSE)
+    vbox.pack_start (entry, False, False)
 
     entry = create_config_entry (dialog, client, "/apps/basic-gconf-app/blah")
-    vbox.pack_start (entry, gtk.FALSE, gtk.FALSE)
+    vbox.pack_start (entry, False, False)
   
     return dialog
 
Index: gnome-python-2.18.0/examples/gconf/simple-controller.py
===================================================================
--- gnome-python-2.18.0.orig/examples/gconf/simple-controller.py	2008-04-01 09:59:15.000000000 -0300
+++ gnome-python-2.18.0/examples/gconf/simple-controller.py	2008-04-01 10:04:20.000000000 -0300
@@ -1,11 +1,11 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2.5
 #
 # A very simple program that sets a single key value when you type
 # it in an entry and press return
 #
 
 import gtk
-import gconf
+from gnome import gconf
    
 def entry_activated_callback(entry, client):
     s = entry.get_chars (0, -1)
Index: gnome-python-2.18.0/examples/gconf/simple-view.py
===================================================================
--- gnome-python-2.18.0.orig/examples/gconf/simple-view.py	2008-04-01 09:59:15.000000000 -0300
+++ gnome-python-2.18.0/examples/gconf/simple-view.py	2008-04-01 10:04:20.000000000 -0300
@@ -1,10 +1,10 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2.5
 #
 # A very simple program that monitors a single key for changes.
 #
 
 import gtk
-import gconf
+from gnome import gconf
 
 def key_changed_callback (client, cnxn_id, entry, label):
     if not entry.value:
